<?xml version="1.0" encoding="utf-8"?><project name="dita2epub" default="dita2epub">
  
  <!-- test to see where the plugin is located, plugins or demo -->
  <dirname property="epub.dir" file="${ant.file.dita2epub}"></dirname>
	
	<!-- Set this property to set the ePub URI stub to a useful value. -->
	<property name="idURIStub" value="http://my-URI-stub/"></property>

	<!-- The name of the directory, within the ePub package, to contain all images: -->
	<property name="images.output.dir" value="images"></property>
	<!-- The name of the directory, within the ePub package, to contain all topics: -->
	<property name="topics.output.dir" value="topics"></property>
	<!-- Controls debugging within the XSLTs. Set to "true" to turn on debugging: -->
	<property name="debug" value="false"></property>
	
	<!--EXM-22462 <property name="args.hide.parent.link" value="yes"/>--><!-- Turn off parent links in topics by default -->

	<property name="epub.temp.dir" value="${dita.temp.dir}${file.separator}epub_temp"></property>
	
	<!-- Defines the @class value to use for topic elements generated for topicheads. -->
	<property name="title.only.topic.class.spec" value="- topic/topic "></property>
	
	<!-- Defines the @class value to use for topic title elements generated for topicheads. -->
	<property name="title.only.topic.title.class.spec" value="- topic/title "></property>
	
	<!-- Leading portion of full EPUB publication ID to be appended to the publication ID -->
	<property name="epub.pubid.uri.stub" value="http://my-URI-stub/"></property>

  <condition property="preprocess.maplink.skip" value="true">
    <isset property="epub.exclude.auto.rellinks"></isset>
  </condition>
  <condition property="preprocess.move-links.skip" value="true">
    <isset property="epub.exclude.auto.rellinks"></isset>
  </condition>
	
  <condition property="d4p.is.map.driven" value="true">
  	<equals arg1="transtype" arg2="epub"></equals>
  </condition>

	<target name="dita2epub" unless="noMap" depends="d4p.map-driven-build-init,build-init,preprocess,epub">
  </target>
  
  <target name="epub" unless="noMap" depends="dita.map.epub, zipepub"></target>
	  
  <target name="zipepub">
    <!-- Two steps because mimetype must go in first,
      uncompressed. Looks like ant puts later zipped files in
      first, so mimetype is in second zip task. -->
    <zip destfile="${output.dir}${file.separator}${dita.map.filename.root}.epub" basedir="${epub.temp.dir}" compress="true" includes="META-INF${file.separator}container.xml,toc.ncx,       content.opf,container.opf,**/*.html,**/*.css,**/*.HTML,**/*.CSS,       **/*.jpg,**/*.gif,**/*.png,**/*.svg,**/*.JPG,**/*.GIF,**/*.PNG,**/*.SVG"></zip>
    <zip destfile="${output.dir}${file.separator}${dita.map.filename.root}.epub" basedir="${epub.temp.dir}" includes="mimetype" update="true" keepcompression="true" compress="false"></zip>
  </target>
  
    
  <target name="dita.map.epub.init" description="Init properties for Epub">
    <condition property="out.ext" value=".html">
      <not>
        <isset property="out.ext"></isset>
      </not>
    </condition>
    <condition property="noPlugin">
      <equals arg1="${dita.epub.plugin}" arg2="no"></equals>
    </condition>
    <condition property="css.output.dir" value="topics">
      <not>
        <isset property="args.css.output.dir"></isset>
      </not>
    </condition>
    <condition property="css.output.dir" value="${args.css.output.dir}">
      <isset property="args.css.output.dir"></isset>
    </condition>
  	
  	<echo message="+++ Epub properties:"></echo>
  	<echoproperties format="text" regex="^(epub|css|out\.)" taskname="echo"></echoproperties>
  </target>
  

  
  <target name="dita.map.epub" depends="dita.map.epub.init, epub-copy-css" description="Generate all ePub components from input map and topics">
  	
  	<mkdir dir="${epub.temp.dir}"></mkdir>
  	<makeurl file="${epub.temp.dir}" property="epub.xslt.outdir"></makeurl>
  	<makeurl file="${dita.temp.dir}" property="epub.xslt.tempdir"></makeurl>
  	<makeurl file="${cover.graphic.file}" property="cover.graphic.uri" validate="false"></makeurl>
  	<echo message="[DEBUG] cover.graphic.uri=${cover.graphic.uri}"></echo>
  	
  	<property name="args.xsl" location="${epub.dir}/xsl/map2epub.xsl"></property>
  	
  	<echo message="[DEBUG] input file=&apos;${dita.temp.dir}${file.separator}${user.input.file}&apos;"></echo>

  	<!-- NOTE: since we're not using the direct output of the base XSLT transform we just
  	     set the output directory to the temp dir where it will be ignored.
  	  -->
    <xslt processor="trax" basedir="${dita.temp.dir}" destdir="${dita.temp.dir}" includesfile="${dita.temp.dir}${file.separator}${user.input.file.listfile}" classpathref="dost.class.path" style="${args.xsl}">
     	<param name="cssOutputDir" expression="${css.output.dir}"></param>
      <param name="debug" expression="${debug}"></param>
    	<param name="coverGraphicUri" expression="${cover.graphic.uri}" if="cover.graphic.file"></param>
    	<param name="idURIStub" expression="${epub.pubid.uri.stub}"></param>
     	<param name="imagesOutputDir" expression="${images.output.dir}"></param>
     	<param name="outdir" expression="${epub.xslt.outdir}"></param>
    	<!--EXM-22134 added OUTPUTDIR to be used by common stylesheets-->
    	<param name="OUTPUTDIR" expression="${output.dir}"></param>
      <param name="outext" expression="${out.ext}"></param><!-- Extension to use for result files, e.g., ".html" -->
     	<param name="tempdir" expression="${epub.xslt.tempdir}"></param>
    	<param name="rawPlatformString" expression="${os.name}"></param>
    	<param name="titleOnlyTopicClassSpec" expression="${title.only.topic.class.spec}"></param>
    	<param name="titleOnlyTopicTitleClassSpec" expression="${title.only.topic.title.class.spec}"></param>
     	<param name="topicsOutputDir" expression="${topics.output.dir}"></param>

    	<!-- Parameters from dita2xhtml and similar transtypes: -->   
      <param name="WORKDIR" expression="${workdir}" if="workdir"></param>
      <param name="CSS" expression="${args.css.file}" if="args.css.file"></param>
      <param name="CSSPATH" expression="${user.csspath}" if="user.csspath"></param>
      <param name="DRAFT" expression="${args.draft}" if="args.draft"></param>
      <param name="ARTLBL" expression="${args.artlbl}" if="args.artlbl"></param>
      <param name="GENERATE-TASK-LABELS" expression="${args.gen.task.lbl}" if="args.gen.task.lbl"></param>
      <param name="PRESERVE-DITA-CLASS" expression="${args.xhtml.classattr}" if="args.xhtml.classattr"></param>
      <param name="NOPARENTLINK" expression="${args.hide.parent.link}" if="args.hide.parent.link"></param>
      <param name="BREADCRUMBS" expression="${args.breadcrumbs}" if="args.breadcrumbs"></param>
      <param name="INDEXSHOW" expression="${args.indexshow}" if="args.indexshow"></param>
    </xslt>
  	
  	<antcall target="epub.copy.graphics"></antcall>
  	
  </target>
  
  <target name="epub.copy.graphics" description="Copies graphics from input to the ePub output directory based on the graphic map generated during epub generation">
  	<ant antfile="${epub.temp.dir}/copy-graphics.xml">
  	</ant>
	</target>
	
  <target name="epub-copy-css" description="Copy CSS files">    
    <condition property="user.copycss.yes">
      <isset property="args.css.present"></isset>
    </condition>
    <property name="user.csspath.real" value="${epub.temp.dir}/${topics.output.dir}/${user.csspath}"></property>
    <mkdir dir="${user.csspath.real}"></mkdir>    
    <!-- Always copy system default css files -->
    <copy todir="${user.csspath.real}">
      <fileset dir="${dita.resource.dir}" includes="*.css"></fileset>
    </copy>    
    <!-- Copy user specify css file when required -->
    <antcall target="epub-copy-css-user"></antcall>
  </target>

  <target name="epub-copy-css-user" if="user.copycss.yes">
    <copy file="${args.css.real}" todir="${user.csspath.real}"></copy>
  </target>

</project>